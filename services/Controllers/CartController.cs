using Microsoft.AspNetCore.Mvc;
using web_service.Models;
using web_service.Services;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using System;

namespace web_service.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CartController : ControllerBase
    {
        private readonly CartService _cartService;
        private readonly ProductService _productService;
        private readonly UserService _userService;

        public CartController(CartService cartService, ProductService productService, UserService userService)
        {
            _cartService = cartService;
            _productService = productService;
            _userService = userService;
        }

        // GET: api/Cart
        [HttpGet]
        public async Task<IActionResult> Get()
        {
            try
            {
                var carts = await _cartService.GetAsync();
                return Ok(carts);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "An error occurred while retrieving carts.", error = ex.Message });
            }
        }

        // GET: api/Cart/{id}
        [HttpGet("{id:length(24)}")]
        public async Task<IActionResult> Get(string id)
        {
            try
            {
                var cart = await _cartService.GetAsync(id);

                if (cart == null)
                {
                    return NotFound(new { message = "Cart not found." });
                }

                return Ok(cart);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "An error occurred while retrieving the cart.", error = ex.Message });
            }
        }

        // GET: api/Cart/{userId}
        [HttpGet("user/{userId:length(24)}")]
        public async Task<IActionResult> GetByUserId(string userId)
        {
            try
            {
                var carts = await _cartService.GetByUserIdAsync(userId);

                if (carts == null || !carts.Any())
                {
                    return NotFound(new { message = "No carts found for this user." });
                }

                return Ok(carts);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "An error occurred while retrieving the cart by userId.", error = ex.Message });
            }
        }

        // POST: api/Cart
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] Cart newCart)
        {
            newCart.CartId = null; // Ensure CartId is autogenerated

            if (!ModelState.IsValid)
            {
                var errors = ModelState.Values
                    .SelectMany(v => v.Errors)
                    .Select(e => e.ErrorMessage).ToList();

                return BadRequest(new { message = "Validation failed.", errors });
            }

            try
            {
                // Validate UserId exists
                var user = await _userService.GetAsync(newCart.UserId);
                if (user == null)
                {
                    return BadRequest(new { message = "Invalid UserId: User not found." });
                }

                // Validate ProductIds exist
                List<string> invalidProductIds = new List<string>();
                foreach (var productId in newCart.ProductIds)
                {
                    var product = await _productService.GetAsync(productId);
                    if (product == null)
                    {
                        invalidProductIds.Add(productId);
                    }
                }

                if (invalidProductIds.Any())
                {
                    return BadRequest(new { message = "Invalid ProductIds: The following products were not found.", invalidProductIds });
                }

                await _cartService.CreateAsync(newCart);
                return Ok(new { message = "Cart created successfully.", cart = newCart });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "An error occurred while creating the cart.", error = ex.Message });
            }
        }

        // PUT: api/Cart/{id}
        [HttpPut("{id:length(24)}")]
        public async Task<IActionResult> Update(string id, [FromBody] Cart updatedCart)
        {
            if (!ModelState.IsValid)
            {
                var errors = ModelState.Values
                    .SelectMany(v => v.Errors)
                    .Select(e => e.ErrorMessage).ToList();

                return BadRequest(new { message = "Validation failed.", errors });
            }

            try
            {
                var existingCart = await _cartService.GetAsync(id);

                if (existingCart == null)
                {
                    return NotFound(new { message = "Cart not found." });
                }

                // Validate UserId exists
                var user = await _userService.GetAsync(updatedCart.UserId);
                if (user == null)
                {
                    return BadRequest(new { message = "Invalid UserId: User not found." });
                }

                // Validate ProductIds exist
                List<string> invalidProductIds = new List<string>();
                foreach (var productId in updatedCart.ProductIds)
                {
                    var product = await _productService.GetAsync(productId);
                    if (product == null)
                    {
                        invalidProductIds.Add(productId);
                    }
                }

                if (invalidProductIds.Any())
                {
                    return BadRequest(new { message = "Invalid ProductIds: The following products were not found.", invalidProductIds });
                }

                updatedCart.CartId = existingCart.CartId;

                await _cartService.UpdateAsync(id, updatedCart);

                return Ok(new { message = "Cart updated successfully.", cart = updatedCart });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "An error occurred while updating the cart.", error = ex.Message });
            }
        }

        // DELETE: api/Cart/{id}
        [HttpDelete("{id:length(24)}")]
        public async Task<IActionResult> Delete(string id)
        {
            try
            {
                var cart = await _cartService.GetAsync(id);

                if (cart == null)
                {
                    return NotFound(new { message = "Cart not found." });
                }

                await _cartService.RemoveAsync(id);

                return Ok(new { message = "Cart deleted successfully." });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "An error occurred while deleting the cart.", error = ex.Message });
            }
        }

        // DELETE: api/Cart/user/{userId}
        [HttpDelete("user/{userId:length(24)}")]
        public async Task<IActionResult> DeleteByUserId(string userId)
        {
            try
            {
                var carts = await _cartService.GetByUserIdAsync(userId);

                if (carts == null || !carts.Any())
                {
                    return NotFound(new { message = "No carts found for this user." });
                }

                foreach (var cart in carts)
                {
                    await _cartService.RemoveAsync(cart.CartId);
                }

                return Ok(new { message = "Carts for the user deleted successfully." });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "An error occurred while deleting the carts for the user.", error = ex.Message });
            }
        }
    }
}